<template>
  <el-container class="monitor-container">
    <!-- 头部区域 -->
    <el-header class="monitor-header">
      <div class="header-left">
        <div class="status-indicator" :class="systemStatus"></div>
        <span class="text-lg font-bold">策略监控中心</span>
      </div>
      
      <div class="header-controls">
        <el-select 
          v-model="selectedStrategy" 
          placeholder="选择策略" 
          size="medium"
          @change="handleStrategySelect"
        >
          <el-option
            v-for="strategy in strategies"
            :key="strategy.id"
            :label="strategy.name"
            :value="strategy.id"
          >
            <div style="display: flex; align-items: center">
              <div class="status-indicator" :class="getStrategyStatus(strategy.id)"></div>
              <span>{{ strategy.name }}</span>
            </div>
          </el-option>
        </el-select>
        
        <el-button type="primary" size="medium" @click="refreshData" icon="el-icon-refresh">
          刷新数据
        </el-button>
      </div>
    </el-header>
    
    <!-- 主内容区域 -->
    <el-main class="monitor-content">
      <!-- 加载状态提示 -->
      <div v-if="loading" class="loading-container">
        <el-icon class="loading-icon"><el-icon-loading /></el-icon>
        <span>数据加载中，请稍候...</span>
      </div>
      
      <div v-else>
        <!-- 错误提示 -->
        <div v-if="error" class="error-container">
          <el-alert :title="error" type="error" show-icon />
          <el-button type="primary" class="retry-button" @click="loadData">重新加载</el-button>
        </div>
        
        <template v-else>
          <!-- 关键指标卡片区域 -->
          <div class="metrics-grid">
            <!-- 卡片结构保持不变 -->
          </div>
          
          <!-- 图表和预警区域 -->
          <div class="content-grid">
            <!-- 内容结构保持不变 -->
          </div>
        </template>
      </div>
    </el-main>
  </el-container>
</template>

<script setup>
import { ref, computed, watch, onMounted, onBeforeUnmount, nextTick } from 'vue'
import * as echarts from 'echarts'
import { ElNotification, ElMessage } from 'element-plus'
import axios from 'axios'
import { useRoute, useRouter } from 'vue-router'

const route = useRoute()
const router = useRouter()

// 响应式数据
const loading = ref(true)
const error = ref(null)
const selectedStrategy = ref(null)
const strategies = ref([])

const systemStatus = ref('')
const uptime = ref(0)
const netValue = ref('')
const yesterdayNetValue = ref('')
const todayProfit = ref(0)
const yearToDate = ref(0)
const todayProfitPercentage = ref('')
const yearToDatePercentage = ref('')
const averageDeviation = ref(0)
const maxDeviation = ref(0)
const industryAvgDeviation = ref(0)
const updateTime = ref('')

const warnings = ref([])

// 图表引用
const heatmapChart = ref(null)
const profitChart = ref(null)
const riskChart = ref(null)

// 图表实例
const heatmapInstance = ref(null)
const profitInstance = ref(null)
const riskInstance = ref(null)

// 定时器引用
const scrollInterval = ref(null)
const timeUpdateInterval = ref(null)
const dataUpdateInterval = ref(null)

// 计算属性
const systemStatusText = computed(() => {
  switch (systemStatus.value) {
    case 'RUNNING': return '正常运行中'
    case 'STOPPED': return '已停止'
    case 'ERROR': return '出错'
    default: return '未知状态'
  }
})

const formattedTodayProfit = computed(() => {
  return formatCurrency(todayProfit.value)
})

const formattedYearToDate = computed(() => {
  return formatCurrency(yearToDate.value)
})

// 方法
function getCurrentTime() {
  const now = new Date()
  return now.toLocaleString('zh-CN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  })
}

function formatCurrency(value) {
  return '¥' + parseFloat(value).toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,')
}

async function loadStrategyList() {
  try {
    const response = await axios.post('/api/strategy-management', {
      id : 1,
      name: 'fu4geliu'
    }, {
      headers: { 'Content-Type': 'application/json' }
    });
    
    strategies.value = response.data.map(item => ({
        id: item.id,
        name: item.name
      }));
    
    // 检查路由参数中是否有策略ID
    const routeStrategyId = route.query.strategyId;
    if (routeStrategyId) {
      // 验证路由中的策略ID是否有效
      if (strategies.value.some(s => s.id == routeStrategyId)) {
        selectedStrategy.value = routeStrategyId;
        loadMonitorData();
        return;
      } else {
        ElMessage.warning(`策略ID ${routeStrategyId} 无效，将选择第一个策略`);
      }
    }
    
    // 没有有效的路由参数时，选择第一个策略
    if (strategies.value.length > 0) {
      selectedStrategy.value = strategies.value[0].id;
      updateRouteParam();
      loadMonitorData();
    } else {
      error.value = '没有可用的策略数据';
    }
    
  } catch (err) {
    console.error('加载策略列表失败:', err);
    error.value = '无法加载策略列表: ' + (err.response?.data?.message || err.message);
    ElMessage.error(error.value);
  } finally {
    loading.value = false;
  }
}

function updateRouteParam() {
  router.push({
    query: { ...route.query, strategyId: selectedStrategy.value }
  });
}

function handleStrategySelect(strategyId) {
  selectedStrategy.value = strategyId;
  updateRouteParam();
  loadMonitorData();
}

function getStrategyStatus(strategyId) {
  // 简化实现，实际中可能需要从API获取状态
  const statusOptions = ['running', 'stopped', 'error'];
  return statusOptions[Math.floor(Math.random() * statusOptions.length)];
}

async function loadMonitorData() {
  if (!selectedStrategy.value) {
    ElMessage.warning('请先选择策略');
    return;
  }
  
  loading.value = true;
  error.value = null;
  
  try {
    // 并行请求所有监控数据
    const [metricsResponse, warningsResponse, profitResponse, heatmapResponse] = await Promise.all([
      
      // 实时监控指标
      axios.post('/api/strategy-monitoring/Metrics', {
        id: selectedStrategy.value,
        name: 'fu4geliu'
      }),
      
      // 预警通知数据
      axios.post('/api/strategy-monitoring/Warnings', {
        id: selectedStrategy.value,
        name: 'fu4geliu'
      }),
      
      // 收益曲线数据
      axios.post('/api/strategy-monitoring/ProfitCurve', {
        id: selectedStrategy.value,
        name: 'fu4geliu'
      }),
      
      // 热力图数据
      axios.post('/api/strategy-monitoring/Heatmap', {
        id: selectedStrategy.value,
        name: 'fu4geliu'
      })
    ]);
    console.log('监控指标响应:', metricsResponse);
    console.log('预警通知响应:', warningsResponse);
    console.log('收益曲线响应:', profitResponse);
    console.log('热力图响应:', heatmapResponse);
    
    // 监控指标
    const metrics = metricsResponse.data;
    systemStatus.value = metrics.systemStatus;
    uptime.value = metrics.uptimeDays;
    netValue.value = metrics.netValue.toFixed(4);
    yesterdayNetValue.value = metrics.yesterdayNetValue?.toFixed(4) || '1.0000';
    todayProfit.value = metrics.todayProfit;
    yearToDate.value = metrics.yearToDateProfit;
    todayProfitPercentage.value = metrics.todayProfitPercentage.toFixed(2);
    yearToDatePercentage.value = metrics.yearToDatePercentage.toFixed(2);
    averageDeviation.value = metrics.averageDeviation.toFixed(2);
    maxDeviation.value = metrics.maxDeviation.toFixed(2);
    industryAvgDeviation.value = metrics.industryAvgDeviation.toFixed(2);
    
    // 预警通知
    warnings.value = warningsResponse.data.map(warning => ({
      title: warning.title,
      time: new Date(warning.eventTime).toLocaleTimeString('zh-CN', { hour12: false }),
      description: warning.description,
      level: warning.riskLevel.toLowerCase()
    }));
    
    // 热力图数据
    const heatmapData = heatmapResponse.data;
    initHeatmapChart(heatmapData);
    
    // 收益曲线数据
    const profitData = profitResponse.data;
    initProfitChart(profitData);
    
    // 更新时间戳
    updateTime.value = getCurrentTime();
    
  } catch (err) {
    console.error('加载监控数据失败:', err);
    error.value = '加载监控数据失败: ' + (err.response?.data?.message || err.message);
    ElMessage.error(error.value);
  } finally {
    loading.value = false;
  }
}

function refreshData() {
  if (!selectedStrategy.value) {
    ElMessage.warning('请先选择策略');
    return;
  }
  
  loadMonitorData();
}

// 图表方法
async function initCharts() {
  // 等待DOM更新完成
  await nextTick();
  
  // 销毁现有图表实例
  if (heatmapInstance.value) heatmapInstance.value.dispose();
  if (profitInstance.value) profitInstance.value.dispose();
  if (riskInstance.value) riskInstance.value.dispose();
  
  // 初始化图表容器
  heatmapInstance.value = heatmapChart.value ? echarts.init(heatmapChart.value) : null;
  profitInstance.value = profitChart.value ? echarts.init(profitChart.value) : null;
  riskInstance.value = riskChart.value ? echarts.init(riskChart.value) : null;
  
  // 窗口大小变化时重绘图表
  window.addEventListener('resize', handleResize);
}

function handleResize() {
  if (heatmapInstance.value) heatmapInstance.value.resize();
  if (profitInstance.value) profitInstance.value.resize();
  if (riskInstance.value) riskInstance.value.resize();
}

function initHeatmapChart(heatmapData) {
  if (!heatmapData || !heatmapInstance.value) return;
  
  // 行业和维度数据
  const industries = [...new Set(heatmapData.map(item => item.industry))];
  const dimensions = [...new Set(heatmapData.map(item => item.comparisonDimension))];
  
  // 准备热力图数据
  const data = [];
  for (let i = 0; i < dimensions.length; i++) {
    for (let j = 0; j < industries.length; j++) {
      const item = heatmapData.find(
        d => d.industry === industries[j] && 
        d.comparisonDimension === dimensions[i]
      );
      if (item) {
        data.push([j, i, parseFloat(item.deviationValue.toFixed(2))]);
      }
    }
  }
  
  const option = {
    tooltip: {
      position: 'top',
      formatter: function(params) {
        return `${dimensions[params.value[1]]}在${industries[params.value[0]]}的<br>偏离度: ${params.value[2]}%`;
      }
    },
    grid: {
      top: '10%',
      left: '10%',
      right: '10%',
      bottom: '15%'
    },
    xAxis: {
      type: 'category',
      data: industries,
      splitArea: {
        show: true
      },
      axisLabel: {
        interval: 0,
        rotate: 30
      }
    },
    yAxis: {
      type: 'category',
      data: dimensions,
      splitArea: {
        show: true
      }
    },
    visualMap: {
      min: -5,
      max: 10,
      calculable: true,
      orient: 'horizontal',
      left: 'center',
      bottom: '5%',
      inRange: {
        color: ['#ffffff', '#e6f7ff', '#91d5ff', '#4096ff', '#0958d9']
      }
    },
    series: [{
      name: '偏离程度',
      type: 'heatmap',
      data: data,
      label: {
        show: true,
        formatter: '{c}%',
        color: '#333'
      },
      emphasis: {
        itemStyle: {
          shadowBlur: 10,
          shadowColor: 'rgba(0, 0, 0, 0.5)'
        }
      }
    }]
  };
  
  heatmapInstance.value.setOption(option);
}

function initProfitChart(profitData) {
  if (!profitData || !profitInstance.value) return;
  
  // 准备图表数据
  const dates = profitData.map(item => {
    const date = new Date(item.pointDate);
    return `${date.getMonth() + 1}/${date.getDate()}`;
  });
  
  const values = profitData.map(item => parseFloat(item.netValue.toFixed(4)));
  
  const option = {
    tooltip: {
      trigger: 'axis',
      formatter: '{b}<br>净值: {c}'
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '10%',
      top: '10%',
      containLabel: true
    },
    xAxis: {
      type: 'category',
      boundaryGap: false,
      data: dates,
      axisLine: {
        lineStyle: {
          color: '#909399'
        }
      }
    },
    yAxis: {
      type: 'value',
      min: values.length > 0 ? Math.min(...values) * 0.95 : 0,
      axisLine: {
        show: true,
        lineStyle: {
          color: '#909399'
        }
      },
      splitLine: {
        lineStyle: {
          type: 'dashed'
        }
      }
    },
    series: [{
      name: '净值',
      type: 'line',
      smooth: true,
      symbol: 'circle',
      symbolSize: 8,
      data: values,
      lineStyle: {
        width: 3,
        color: '#1e9fff'
      },
      areaStyle: {
        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
          { offset: 0, color: 'rgba(30, 159, 255, 0.4)' },
          { offset: 1, color: 'rgba(30, 159, 255, 0.05)' }
        ])
      },
      markPoint: {
        data: [
          { type: 'max', name: '最大值' },
          { type: 'min', name: '最小值' }
        ]
      }
    }]
  };
  
  profitInstance.value.setOption(option);
}

function getWarningIcon(level) {
  switch(level) {
    case 'high': return 'el-icon-warning-outline'
    case 'medium': return 'el-icon-info'
    case 'low': return 'el-icon-message'
    default: return 'el-icon-info'
  }
}

function getWarningType(level) {
  switch(level) {
    case 'high': return 'danger'
    case 'medium': return 'warning'
    case 'low': return 'info'
    default: return 'info'
  }
}

function getWarningLevelText(level) {
  switch(level) {
    case 'high': return '高'
    case 'medium': return '中'
    case 'low': return '低'
    default: return '未知'
  }
}

// 生命周期钩子
onMounted(() => {
  // 监听路由变化
  watch(() => route.query.strategyId, (newStrategyId) => {
    if (newStrategyId && strategies.value.some(s => s.id == newStrategyId)) {
      selectedStrategy.value = newStrategyId;
      loadMonitorData();
    }
  });
  
  // 初始化图表
  initCharts();
  
  // 加载策略列表
  loadStrategyList();
  
  // 启动定时更新时间
  timeUpdateInterval.value = setInterval(() => {
    updateTime.value = getCurrentTime();
  }, 1000);
  
  // 滚动预警信息
  scrollInterval.value = setInterval(() => {
    const warningList = document.querySelector('.warning-list');
    if (warningList) {
      const firstItem = warningList.firstElementChild;
      if (firstItem) {
        warningList.appendChild(firstItem.cloneNode(true));
        warningList.removeChild(firstItem);
      }
    }
  }, 8000);
});

onBeforeUnmount(() => {
  // 清除所有定时器
  if (scrollInterval.value) clearInterval(scrollInterval.value);
  if (timeUpdateInterval.value) clearInterval(timeUpdateInterval.value);
  if (dataUpdateInterval.value) clearInterval(dataUpdateInterval.value);
  
  // 销毁图表实例
  if (heatmapInstance.value) heatmapInstance.value.dispose();
  if (profitInstance.value) profitInstance.value.dispose();
  if (riskInstance.value) riskInstance.value.dispose();
  
  // 移除事件监听
  window.removeEventListener('resize', handleResize);
});
</script>

<style scoped>
.monitor-container {
  height: 100vh;
  display: flex;
  flex-direction: column;
  background: linear-gradient(135deg, #f0f5ff 0%, #e6f7ff 100%);
}

.monitor-header {
  background-color: #ffffff;
  padding: 0 24px;
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid #e4e7ed;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.05);
}

.header-left {
  display: flex;
  align-items: center;
  gap: 16px;
}

.status-indicator {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background-color: #909399;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

.status-indicator.running {
  background-color: #1e9fff;
  animation: pulse 1.5s infinite;
}

.status-indicator.stopped {
  background-color: #909399;
}

.status-indicator.error {
  background-color: #f56c6c;
  animation: blink 1s infinite;
}

@keyframes pulse {
  0% { transform: scale(0.95); opacity: 0.8; }
  50% { transform: scale(1.05); opacity: 1; }
  100% { transform: scale(0.95); opacity: 0.8; }
}

@keyframes blink {
  0% { opacity: 0.4; }
  50% { opacity: 1; }
  100% { opacity: 0.4; }
}

.text-lg {
  font-size: 18px;
}

.font-bold {
  font-weight: 600;
}

.header-controls {
  display: flex;
  align-items: center;
  gap: 16px;
}

.el-select {
  width: 180px;
}

.monitor-content {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
}

.metrics-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-bottom: 20px;
}

.metric-card {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  padding: 20px;
  transition: all 0.3s;
  border-left: 4px solid #1e9fff;
}

.metric-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.1);
}

.metric-title {
  font-size: 14px;
  color: #606266;
  margin-bottom: 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.metric-value {
  font-size: 24px;
  font-weight: 600;
  color: #1e2a3a;
}

.metric-value-large {
  font-size: 32px;
  font-weight: 700;
  color: #1e2a3a;
  margin: 12px 0;
}

.metric-subtext {
  font-size: 12px;
  color: #909399;
  margin-top: 8px;
}

.profit {
  color: #52c41a;
}

.loss {
  color: #f5222d;
}

.profit-trend {
  margin-left: 8px;
}

.profit-trend.up {
  color: #52c41a;
}

.profit-trend.down {
  color: #f5222d;
}

.content-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-auto-rows: minmax(300px, auto);
  gap: 20px;
}

.chart-card, .warning-card {
  background-color: #ffffff;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  padding: 20px;
  display: flex;
  flex-direction: column;
  height: 100%;
}

.card-title {
  font-size: 16px;
  font-weight: 600;
  color: #1e2a3a;
  margin-bottom: 16px;
  padding-bottom: 12px;
  border-bottom: 1px solid #ebeef5;
  display: flex;
  align-items: center;
  gap: 8px;
}

.chart-container {
  flex: 1;
  min-height: 250px;
}

.warning-container {
  background-color: #fdf6ec;
  border-radius: 6px;
  padding: 12px;
  height: 220px;
  overflow: hidden;
  position: relative;
  border: 1px solid #faecd8;
}

.warning-list {
  list-style: none;
  padding: 0;
  margin: 0;
  position: absolute;
  width: calc(100% - 24px);
}

.warning-item {
  padding: 12px 16px;
  background-color: #ffffff;
  margin-bottom: 10px;
  border-radius: 6px;
  display: flex;
  align-items: flex-start;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  transition: all 0.3s;
  border-left: 4px solid transparent;
}

.warning-item:hover {
  transform: translateX(5px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.warning-icon {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: #fef6e9;
  color: #e6a23c;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 12px;
  flex-shrink: 0;
}

.warning-level-high .warning-icon {
  background-color: #fef0f0;
  color: #f56c6c;
}

.warning-level-medium .warning-icon {
  background-color: #fef6e9;
  color: #e6a23c;
}

.warning-level-low .warning-icon {
  background-color: #f0f9eb;
  color: #67c23a;
}

.warning-content {
  flex: 1;
}

.warning-title {
  font-weight: 600;
  font-size: 14px;
  color: #1e2a3a;
  margin-bottom: 4px;
  display: flex;
  align-items: center;
  gap: 8px;
}

.warning-time {
  font-size: 12px;
  color: #909399;
}

.timestamp {
  text-align: right;
  color: #909399;
  font-size: 12px;
  margin-top: 16px;
  padding-top: 12px;
  border-top: 1px dashed #ebeef5;
}

/* 警告级别样式 */
.warning-level-high {
  border-left-color: #f56c6c;
}

.warning-level-medium {
  border-left-color: #e6a23c;
}

.warning-level-low {
  border-left-color: #67c23a;
}

</style>