<template>
  <div class="common-layout">
    <el-container class="h-screen">
      <!-- 左侧导航栏 -->
      <el-aside width="200px" class="bg-white border-r border-gray-200 flex flex-col">
        <!-- 系统标题 -->
        <div class="p-4 border-b border-gray-200 flex items-center h-[64px]">
          <el-icon class="text-blue-500 text-xl"><Monitor /></el-icon>
          <span class="ml-2 font-bold text-lg">策略管理子系统</span>
        </div>
        
        <!-- 导航菜单 -->
        <div class="flex-1 py-4 overflow-y-auto">
          <div class="nav-item active">
            <el-icon><Menu /></el-icon>
            <span>策略管理</span>
          </div>
          <div class="nav-item">
            <el-icon><Plus /></el-icon>
            <span>策略创建</span>
          </div>
          <div class="nav-item">
            <el-icon><DataLine /></el-icon>
            <span>策略监控</span>
          </div>
          <div class="nav-item">
            <el-icon><Setting /></el-icon>
            <span>再平衡设置</span>
          </div>
        </div>
        
        <!-- 用户信息 -->
        <div class="p-4 border-t border-gray-200 flex items-center text-sm">
          <el-avatar :size="32" src="https://cube.elemecdn.com/0/88/03b0d39583f48206768a7534e55bcpng.png" />
          <span class="ml-2">管理员</span>
        </div>
      </el-aside>
      
      <el-container>
        <!-- 右侧内容区 -->
        <el-header class="border-b border-gray-200 bg-white flex items-center justify-between">
          <div>
            <h2 class="text-xl font-medium">策略管理</h2>
          </div>
          <el-button type="primary" @click="createStrategy">
            <el-icon class="mr-1"><Plus /></el-icon>创建策略
          </el-button>
        </el-header>
        
        <el-main class="bg-gray-50 flex-1 overflow-auto p-6">
          <!-- 策略列表 -->
          <div class="bg-white rounded-lg shadow-md mb-6">
            <div class="p-5">
              <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-medium">策略列表</h3>
                <div class="flex">
                  <el-input 
                    v-model="searchQuery"
                    placeholder="搜索策略名称" 
                    clearable 
                    class="mr-3 w-56"
                  >
                    <template #prefix>
                      <el-icon><Search /></el-icon>
                    </template>
                  </el-input>
                  <el-select v-model="statusFilter" placeholder="全部状态" class="w-32">
                    <el-option label="全部状态" value="all" />
                    <el-option label="运行中" value="active" />
                    <el-option label="已停止" value="inactive" />
                    <el-option label="警告" value="warning" />
                  </el-select>
                </div>
              </div>
              
              <el-table :data="filteredStrategies" style="width: 100%">
                <el-table-column prop="name" label="策略名称" min-width="180" />
                <el-table-column prop="type" label="策略类型" min-width="120" />
                <el-table-column label="状态" min-width="100">
                  <template #default="{ row }">
                    <el-tag 
                      :type="statusTypeMap[row.status]"
                      class="flex items-center"
                      effect="light"
                    >
                      <span :class="statusDotClassMap[row.status]"></span>
                      {{ statusLabelMap[row.status] }}
                    </el-tag>
                  </template>
                </el-table-column>
                <el-table-column prop="createdAt" label="创建时间" min-width="180" />
                <el-table-column label="最新收益" min-width="120">
                  <template #default="{ row }">
                    <span :class="row.gain >= 0 ? 'text-green-500' : 'text-red-500'">
                      {{ row.gain >= 0 ? '+' : '' }}{{ row.gain }}%
                    </span>
                  </template>
                </el-table-column>
                <el-table-column label="操作" min-width="150">
                  <template #default="{ row }">
                    <el-button type="text" size="small" @click="viewDetail(row)">详情</el-button>
                    <el-button 
                      v-if="row.status === 'active'" 
                      type="text" 
                      size="small" 
                      class="text-red-500"
                      @click="stopStrategy(row)"
                    >
                      停止
                    </el-button>
                    <el-button 
                      v-else 
                      type="text" 
                      size="small" 
                      class="text-green-500"
                      @click="startStrategy(row)"
                    >
                      启动
                    </el-button>
                  </template>
                </el-table-column>
              </el-table>
              
              <div class="flex justify-between items-center mt-4">
                <div class="text-gray-500 text-sm">
                  共 {{ filteredStrategies.length }} 条记录，每页显示 {{ pageSize }} 条
                </div>
                <el-pagination
                  v-model:current-page="currentPage"
                  v-model:page-size="pageSize"
                  :page-sizes="[10, 20, 30, 40]"
                  layout="prev, pager, next"
                  :total="filteredStrategies.length"
                  small
                />
              </div>
            </div>
          </div>
        </el-main>
      </el-container>
    </el-container>
    
    <!-- 创建策略对话框 -->
    <el-dialog v-model="showCreateDialog" title="创建新策略" width="500px">
      <el-form :model="newStrategy" label-width="120px">
        <el-form-item label="策略名称">
          <el-input v-model="newStrategy.name" />
        </el-form-item>
        <el-form-item label="策略类型">
          <el-select v-model="newStrategy.type">
            <el-option label="大类资产配置" value="assetAllocation" />
            <el-option label="FOF组合" value="fof" />
            <el-option label="基金指数组合" value="fundIndex" />
            <el-option label="择时组合" value="timing" />
          </el-select>
        </el-form-item>
        <el-form-item label="初始资金">
          <el-input-number v-model="newStrategy.capital" :min="10000" :step="10000" />
        </el-form-item>
      </el-form>
      <template #footer>
        <el-button @click="showCreateDialog = false">取消</el-button>
        <el-button type="primary" @click="confirmCreate">创建</el-button>
      </template>
    </el-dialog>
  </div>
</template>

<script setup>
  import { ref, computed, onMounted } from 'vue'
  import { 
    Monitor, Menu, Plus, DataLine, Setting, User, Search 
  } from '@element-plus/icons-vue'
  
  // 模拟策略数据
  const strategies = ref([
    {
      id: 1,
      name: '大类资产配置策略一',
      type: '大类资产配置',
      status: 'active',
      createdAt: '2023-06-15 09:30:00',
      gain: 4.21
    },
    {
      id: 2,
      name: '指数增强策略',
      type: '量化选股',
      status: 'inactive',
      createdAt: '2023-05-28 14:15:20',
      gain: -1.32
    },
    {
      id: 3,
      name: '价值投资策略',
      type: '因子策略',
      status: 'warning',
      createdAt: '2023-06-01 10:45:38',
      gain: 2.87
    }
  ])
  
  // 状态映射
  const statusTypeMap = {
    active: 'success',
    inactive: 'info',
    warning: 'warning'
  }
  
  const statusDotClassMap = {
    active: 'w-2 h-2 bg-green-500 rounded-full mr-1',
    inactive: 'w-2 h-2 bg-gray-500 rounded-full mr-1',
    warning: 'w-2 h-2 bg-yellow-500 rounded-full mr-1'
  }
  
  const statusLabelMap = {
    active: '运行中',
    inactive: '已停止',
    warning: '警告'
  }
  
  // 过滤条件
  const searchQuery = ref('')
  const statusFilter = ref('all')
  const currentPage = ref(1)
  const pageSize = ref(10)
  
  // 新策略表单
  const showCreateDialog = ref(false)
  const newStrategy = ref({
    name: '',
    type: '',
    capital: 100000
  })
  
  // 计算属性
  const filteredStrategies = computed(() => {
    let result = strategies.value
    
    // 搜索过滤
    if (searchQuery.value) {
      const query = searchQuery.value.toLowerCase()
      result = result.filter(s => 
        s.name.toLowerCase().includes(query) || 
        s.type.toLowerCase().includes(query)
      )
    }
    
    // 状态过滤
    if (statusFilter.value !== 'all') {
      result = result.filter(s => s.status === statusFilter.value)
    }
    
    return result
  })
  
  // 方法
  const createStrategy = () => {
    showCreateDialog.value = true
    // 重置表单
    newStrategy.value = {
      name: '',
      type: '',
      capital: 100000
    }
  }
  
  const confirmCreate = () => {
    strategies.value.push({
      id: strategies.value.length + 1,
      name: newStrategy.value.name || '新策略' + (strategies.value.length + 1),
      type: newStrategy.value.type || '未分类',
      status: 'inactive',
      createdAt: new Date().toLocaleString(),
      gain: 0,
      ...newStrategy.value
    })
    showCreateDialog.value = false
  }
  
  const viewDetail = (strategy) => {
    console.log('查看策略详情:', strategy)
    // 这里实际项目中会导航到策略详情页面
  }
  
  const startStrategy = (strategy) => {
    console.log('启动策略:', strategy.name)
    strategy.status = 'active'
  }
  
  const stopStrategy = (strategy) => {
    console.log('停止策略:', strategy.name)
    strategy.status = 'inactive'
  }
  </script>
  
  <style scoped>
  .nav-item {
    display: flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    color: #4B5563;
    cursor: pointer;
  }
  
  .nav-item:hover {
    background-color: #f5f5f5;
    color: #1890ff;
  }

  /* Delete了 Tailwind CSS 的 @apply 指令，使用普通 CSS 属性替代 */
  .nav-item.active {
    background-color: #e6f7ff;
    color: #1890ff;
    border-left: 4px solid #1890ff;
  }
  
  .nav-item .el-icon {
    margin-right: 0.5rem; /* mr-2 的等效值 */
    font-size: 1.125rem; /* text-lg 的等效值 */
  }
  
  .el-table {
    --el-table-border-color: #ebeef5;
  }
  
  .el-table .el-table__cell {
    padding: 12px 0;
  }
  </style>